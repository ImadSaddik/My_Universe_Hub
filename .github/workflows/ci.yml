name: Frontend and Backend CI pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  # Stage 1: Lint and format check
  frontend-lint-format:
    name: Frontend lint & format
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "10.11.0"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install

      - name: Run ESLint
        run: pnpm run lint

      - name: Check Prettier formatting
        run: pnpm run format --check

  backend-lint-format:
    name: Backend lint & format
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies with uv
        run: uv pip install -r requirements.txt --system

      - name: Run Ruff formatter check
        run: ruff format . --check

      - name: Run Ruff linter
        run: ruff check .

  # Stage 2: Unit tests
  frontend-unit-tests:
    name: Frontend unit tests
    runs-on: ubuntu-latest
    needs: [frontend-lint-format, backend-lint-format]
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "10.11.0"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install

      - name: Run unit tests
        run: pnpm run test

  backend-unit-tests:
    name: Backend unit tests
    runs-on: ubuntu-latest
    needs: [frontend-lint-format, backend-lint-format]
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies with uv
        run: uv pip install -r requirements.txt --system

      - name: Run backend unit tests
        run: |
          pytest --cov --cov-branch --cov-report=xml
        env:
          DJANGO_SETTINGS_MODULE: backend.settings
          "GOOGLE_API_KEY": ${{ secrets.GOOGLE_API_KEY }}

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: ImadSaddik/My_Universe_Hub

  # Stage 3: E2E tests
  e2e-tests:
    name: E2E tests
    runs-on: ubuntu-latest
    needs: [frontend-unit-tests, backend-unit-tests]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      # Set up backend
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install backend dependencies
        run: |
          cd backend
          uv pip install -r requirements.txt --system

      # Set up frontend
      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "10.11.0"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install

      - name: Install Cypress binary
        run: |
          cd frontend
          pnpm exec cypress install

      - name: Install wait-on globally
        run: npm install -g wait-on

      # Setup database and test data
      - name: Setup Django database
        run: |
          cd backend
          python manage.py migrate
        env:
          DJANGO_SETTINGS_MODULE: backend.settings

      - name: Create test user
        run: |
          cd backend
          python utils/create_test_user.py
        env:
          DJANGO_SETTINGS_MODULE: backend.settings
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

      - name: Fill database with gallery data
        run: |
          cd backend
          python utils/fill_database.py
        env:
          DJANGO_SETTINGS_MODULE: backend.settings

      # Start backend server
      - name: Start Django backend
        run: |
          cd backend
          python manage.py runserver 0.0.0.0:8000 &
        env:
          DJANGO_SETTINGS_MODULE: backend.settings

      - name: Wait for backend to be ready
        run: wait-on http://localhost:8000/api/v1/gallery/0/10/ --timeout 60000

      # Start frontend server
      - name: Create environment file for frontend
        run: |
          cd frontend
          cat > .env << EOF
          VITE_API_BASE_URL=http://localhost:8000
          TEST_USER_EMAIL=${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD=${{ secrets.TEST_USER_PASSWORD }}
          EOF
          echo "Created .env file with contents:"

      - name: Start frontend
        run: |
          cd frontend
          pnpm run dev &
        env:
          VITE_API_BASE_URL: http://localhost:8000

      - name: Wait for frontend to be ready
        run: wait-on http://localhost:8080 --timeout 60000

      # Debug: Test API endpoints before running Cypress
      - name: Test API connectivity
        run: |
          echo "Testing backend API..."
          curl -f http://localhost:8000/api/v1/gallery/0/10/ || exit 1
          echo "API response contains gallery data:"
          curl -s http://localhost:8000/api/v1/gallery/0/10/ | head -c 200
          echo ""
          echo "Testing frontend..."
          curl -f http://localhost:8080 || exit 1
          echo "Frontend is serving correctly"

      # Run Cypress E2E tests
      # TODO: Uncomment when Cypress tests are ready
      # - name: Run Cypress E2E tests
      #   run: |
      #     cd frontend
      #     pnpm run cypress:run
      #   env:
      #     TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
      #     TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

      # - name: Upload Cypress screenshots (if any)
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: cypress-screenshots
      #     path: frontend/cypress/screenshots

  # Stage 4: Build
  build:
    name: Build applications
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      # Build frontend
      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "10.11.0"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install

      - name: Build frontend
        run: |
          cd frontend
          pnpm run build
        env:
          NODE_ENV: production

      # Build backend (collect static files)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install backend dependencies
        run: |
          cd backend
          uv pip install -r requirements.txt --system

      - name: Collect static files
        run: |
          cd backend
          python manage.py collectstatic --noinput
        env:
          DJANGO_SETTINGS_MODULE: backend.settings

      - name: Archive frontend build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/

      - name: Archive backend static files artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-static
          path: backend/static/

  # Stage 5: Deploy to production
  deploy:
    name: Deploy to production
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: production

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Download frontend build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: Download backend static files artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-static
          path: backend/static

      - name: SSH - Backup database on droplet
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            APP_DIR="/web_app/myuniversehub"
            DB_FILE_PATH="$APP_DIR/backend/db.sqlite3"
            BACKUP_DIR_ON_SERVER="$APP_DIR/backend/db_backups_from_deploy"

            echo "--- Backing up database ---"
            mkdir -p "$BACKUP_DIR_ON_SERVER"
            if [ -f "$DB_FILE_PATH" ]; then
              TIMESTAMP=$(date +%Y%m%d%H%M%S)
              cp "$DB_FILE_PATH" "$BACKUP_DIR_ON_SERVER/db.sqlite3.backup.$TIMESTAMP"
              echo "Database backed up to $BACKUP_DIR_ON_SERVER/db.sqlite3.backup.$TIMESTAMP"
            else
              echo "Database file $DB_FILE_PATH not found. Skipping backup."
            fi
            echo "--- Database backup finished ---"

      - name: Rsync files to droplet
        uses: easingthemes/ssh-deploy@v5.1.0
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.DROPLET_HOST }}
          REMOTE_USER: ${{ secrets.DROPLET_USER }}
          SOURCE: "./"
          TARGET: "/web_app/myuniversehub/"
          ARGS: "-avzr --delete"
          EXCLUDE: ".git/, .github/, frontend/node_modules/, backend/myvenv/, backend/db.sqlite3, backend/db_backups_from_deploy/, backend/db.sqlite3.backup.*, backend/media/, backend/.env, frontend/.env*, *.pyc, __pycache__/, .DS_Store, shell_scripts/"

      - name: SSH - Create frontend .env file on droplet
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            FRONTEND_ENV_PATH="/web_app/myuniversehub/frontend/.env"
            echo "Creating frontend .env file at $FRONTEND_ENV_PATH"
            cat > "$FRONTEND_ENV_PATH" << EOF
            # Frontend environment variables for Production
            VITE_API_BASE_URL=https://myuniversehub.com
            EOF
            echo "Frontend .env file created."
            cat "$FRONTEND_ENV_PATH"

      - name: SSH - Create backend .env file on droplet
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            BACKEND_ENV_PATH="/web_app/myuniversehub/backend/.env"
            echo "Creating backend .env file at $BACKEND_ENV_PATH"
            cat > "$BACKEND_ENV_PATH" << EOF
            # Backend environment variables for Production
            EMAIL_HOST_USER=${{ secrets.PROD_EMAIL_HOST_USER }}
            EMAIL_HOST_PASSWORD=${{ secrets.PROD_EMAIL_HOST_PASSWORD }}
            GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
            DJANGO_DEBUG=False
            DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
            EOF
            echo "Backend .env file created."
            cat "$BACKEND_ENV_PATH"

      - name: SSH - Post-deployment script on droplet
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            APP_DIR="/web_app/myuniversehub"
            BACKEND_DIR="$APP_DIR/backend"
            VENV_PATH="$BACKEND_DIR/myvenv/bin/activate"

            echo "--- Running post-deployment tasks on droplet ---"
            cd "$APP_DIR"

            # Activate virtual environment, install dependencies, migrate
            if [ -f "$VENV_PATH" ]; then
              echo "Activating virtual environment: $VENV_PATH"
              source "$VENV_PATH"

              cd "$BACKEND_DIR"
              echo "Changed directory to $BACKEND_DIR"

              if [ -f "requirements.txt" ]; then
                echo "Installing/updating backend dependencies..."
                pip install -r requirements.txt
              else
                echo "requirements.txt not found in $BACKEND_DIR. Skipping dependency installation."
              fi

              echo "Running database migrations..."
              python manage.py migrate --noinput

              deactivate
              echo "Deactivated virtual environment."
              cd "$APP_DIR" # Go back to the main app directory for chown
            else
              echo "Virtual environment activation script $VENV_PATH not found. Skipping backend setup."
              exit 1 # Fail deployment if backend setup is critical
            fi

            echo "Setting file ownership for $APP_DIR to imadsaddik:saddik..."
            sudo chown -R imadsaddik:saddik "$APP_DIR"
            echo "File ownership set."

            echo "Restarting services..."
            if command -v supervisorctl &> /dev/null; then
              sudo supervisorctl restart My_Universe_Hub
              echo "Supervisor 'My_Universe_Hub' restarted."
            else
              echo "supervisorctl command not found. Skipping Gunicorn restart."
            fi

            if command -v systemctl &> /dev/null && systemctl --quiet is-active nginx; then
              sudo systemctl restart nginx
              echo "Nginx restarted."
            else
              echo "Nginx not found or not active. Skipping Nginx restart."
            fi

            echo "--- Post-deployment tasks finished successfully ---"
