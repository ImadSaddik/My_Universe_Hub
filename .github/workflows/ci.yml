name: Frontend and Backend CI pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Stage 1: Lint and format check
  frontend-lint-format:
    name: Frontend lint & format
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "10.11.0"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install

      - name: Run ESLint
        run: pnpm run lint

      - name: Check Prettier formatting
        run: pnpm run format --check

  backend-lint-format:
    name: Backend lint & format
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies with uv
        run: uv pip install -r requirements.txt --system

      - name: Run Ruff formatter check
        run: ruff format . --check

      - name: Run Ruff linter
        run: ruff check .

  # Stage 2: Unit tests
  frontend-unit-tests:
    name: Frontend unit tests
    runs-on: ubuntu-latest
    needs: [frontend-lint-format, backend-lint-format]
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "10.11.0"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install

      - name: Run unit tests
        run: pnpm run test

  backend-unit-tests:
    name: Backend unit tests
    runs-on: ubuntu-latest
    needs: [frontend-lint-format, backend-lint-format]
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies with uv
        run: uv pip install -r requirements.txt --system

      - name: Run backend unit tests
        run: |
          pytest
        env:
          DJANGO_SETTINGS_MODULE: backend.settings
          "GOOGLE_API_KEY": ${{ secrets.GOOGLE_API_KEY }}

  # Stage 3: E2E tests
  e2e-tests:
    name: E2E tests
    runs-on: ubuntu-latest
    needs: [frontend-unit-tests, backend-unit-tests]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      # Set up backend
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install backend dependencies
        run: |
          cd backend
          uv pip install -r requirements.txt --system

      # Set up frontend (for Cypress action)
      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "10.11.0"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Create environment file for frontend
        run: |
          cd frontend
          cat > .env << EOF
          VITE_API_BASE_URL=http://localhost:8000
          TEST_USER_EMAIL=${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD=${{ secrets.TEST_USER_PASSWORD }}
          EOF

      - name: Install wait-on globally
        run: npm install -g wait-on

      # Setup database and test data
      - name: Setup Django database
        run: |
          cd backend
          python manage.py migrate
        env:
          DJANGO_SETTINGS_MODULE: backend.settings

      - name: Create test user
        run: |
          cd backend
          python utils/create_test_user.py
        env:
          DJANGO_SETTINGS_MODULE: backend.settings
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

      - name: Fill database with gallery data
        run: |
          cd backend
          python utils/fill_database.py
        env:
          DJANGO_SETTINGS_MODULE: backend.settings

      # Start backend server
      - name: Start Django backend
        run: |
          cd backend
          python manage.py runserver 0.0.0.0:8000 &
        env:
          DJANGO_SETTINGS_MODULE: backend.settings

      - name: Wait for backend to be ready
        run: wait-on http://localhost:8000/api/v1/gallery/0/10/ --timeout 60000

      # Run Cypress E2E tests using official action
      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          working-directory: frontend
          start: pnpm run dev
          wait-on: "http://localhost:8080"
          wait-on-timeout: 60
          browser: chrome
          config-file: cypress.config.js
          install-command: pnpm install
        env:
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
          VITE_API_BASE_URL: http://localhost:8000

      - name: Upload Cypress screenshots (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: frontend/cypress/screenshots

  # Stage 4: Build
  build:
    name: Build applications
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      # Build frontend
      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "10.11.0"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install

      - name: Build frontend
        run: |
          cd frontend
          pnpm run build

      # Build backend (collect static files)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install backend dependencies
        run: |
          cd backend
          uv pip install -r requirements.txt --system

      - name: Collect static files
        run: |
          cd backend
          python manage.py collectstatic --noinput
        env:
          DJANGO_SETTINGS_MODULE: backend.settings
